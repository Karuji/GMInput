<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum input_state { nav, input};
cur_input_state = input_state.nav;

//input_alias = ds_list_create();
//ds_list_copy( input_alias, Input.input_alias)

// Keyboard Aliases
keyname = ds_map_create();
_inputSet_generate_keyname();

// Gamepad Aliases
btnname = ds_map_create(); //Generic
_inputSet_generate_btnname();
psname = ds_map_create();  //Playstation
_inputSet_generate_psname();
xbname = ds_map_create();  //Xbox
_inputSet_generate_xbname();

// Assign the gp alias to a variable to avoid checking when adding to list
gp_alias = btnname;

// Get dimensions and generate grid.
config_size = ds_list_size( Input.input_alias);
alias_grid = ds_grid_create( 3, config_size*2);

_inputSet_generate_grid();

DEBUG = false;

x_id = 32;
x_key = 256;
x_keyalt = 384

x_start = 32
x_buffer = 128;

y_start = 32
y_buffer = 32;

y_selected = 0;
x_selected = 0;

y_cur = 0;

y_can_move = true;
wait_time = room_speed / 10;

w_surf = 0;
h_surf = 0;
cfg_surf = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y_can_move = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( cur_input_state == input_state.nav)
{
    if( keyboard_check_pressed( vk_enter))
    {
        cur_input_state = input_state.input;
        keyboard_lastkey = 0;
        input_gamepad_last_clear();
        show_debug_message(ord('G'));
    }
    
    if( input_arrow_pressed())
    {
        y_selected -= keyboard_check_pressed( vk_up);
        y_selected += keyboard_check_pressed( vk_down);
        x_selected -= keyboard_check_pressed( vk_left);
        x_selected += keyboard_check_pressed( vk_right);
    }
    else
    {
        y_selected -= input_get_key_pressed("up");
        y_selected += input_get_key_pressed("down");
        x_selected -= input_get_key_pressed("left");
        x_selected += input_get_key_pressed("right");
    }
    y_selected = _inputSet_wrap( y_selected, config_size*2 -1);
    x_selected = _inputSet_wrap( x_selected, 1);
    
}
else
if( cur_input_state == input_state.input)
{
    
    if( keyboard_check_pressed( vk_escape))
    {
        cur_input_state = input_state.nav;
    }
    

    if( y_selected &lt; config_size)
    {
        if( keyboard_lastkey != 0)
        {
            show_debug_message(keyboard_lastkey);
            {
                if( x_selected == 0)
                {
                    if( _inputSet_key_check( Input.keymap, keyboard_lastkey))
                    {
                        Input.keymap[? alias_grid[# 0, y_selected]] = keyboard_lastkey;
                    }
                }
                else
                {
                    if( _inputSet_key_check( Input.keymapalt, keyboard_lastkey))
                    {
                        Input.keymapalt[? alias_grid[# 0, y_selected]] = keyboard_lastkey;
                    }
                }
                
                _inputSet_generate_grid();
                cur_input_state = input_state.nav;
            }
        }
    }
    else
    {   
        var gp_last = input_gamepad_last()
        if( gp_last != 0)
        {
            if( x_selected == 0)
            {
                if( _inputSet_key_check( Input.gpmap, gp_last))
                {
                    Input.gpmap[? alias_grid[# 0, y_selected]] = gp_last;
                }
            }
            else
            {
                if( _inputSet_key_check( Input.gpmapalt, gp_last))
                {
                    Input.gpmapalt[? alias_grid[# 0, y_selected]] = gp_last;
                }
            }
            
            input_gamepad_last_clear();
            _inputSet_generate_grid();
            cur_input_state = input_state.nav;
        }
    }

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( cur_input_state = input_state.nav)
{
    if( view_enabled)
    {
        w_check = view_wview;
        h_check = view_hview;
        h_start = view_yview;
    }      
    else
    {
        w_check = room_width;
        h_check = room_height;
        h_start = 0;
    }
    _inputSet_generate_surf_grid();
    
    if( h_surf &lt; h_check)
    {
        h_pos = h_check/2 - h_surf/2;
    }
    else
    {
        h_pos = h_check /2 -y_selected * y_buffer;
        
        if( y_selected &lt;= config_size)
        {
            if( h_pos &gt; h_start + y_start)
            {
                h_pos = h_start + y_start;
            }
        }
        else
        {
            if( h_pos + h_surf &lt; h_check - y_start)
            {
                h_pos = -h_surf + (h_check - y_start)
            }
        }
    }
    
    draw_surface( cfg_surf, w_check/2 - w_surf/2, h_pos);
}
else
if( cur_input_state = input_state.input)
{
    if( x_selected = 0)
    {
        var alt = "";
    }
    else
    {
        var alt = "alt ";
    }
    
    if( y_selected &lt; config_size)
    {
        var config_alias = "key"
    }
    else
    {
        var config_alias = "button"
    }
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_line(room_width/2,0,room_width/2,room_height);
    draw_line(0,room_height/2,room_width,room_height/2);
    draw_text( room_width / 2, room_height / 2, "Enter new " + alt + config_alias +
             " for " + alias_grid[# 0, y_selected] );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
