<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//==========================================================================//
//-------------------------CONFIG STUFF-------------------------------------//
//==========================================================================//

//+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++
// Julian's note.
//
// Switch debug to true while you are working and altering the variables.
// If DEBUG, then Input will try and load the saved keys and you will
// will not see the changes you have made.
//
// Setting DEBUG to true will also erase any saved key config files.
// You might want to back that up if will want it later.
//+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++

DEBUG = true;

//+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++
// Julian's note.
//
// input_alias's use is for assigning new keys with InputUserSet.
// If you add any new key references you want to also add them
// to input_alias or the user won't be able to edit them.
// The lines are set up so you can copy and paste and just change the string.
// Users will see the keys in the order you arrange them here.
//+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++||+++++

input_alias = ds_list_create()
var i = 0;

input_alias[| i++] = "up";
input_alias[| i++] = "down";
input_alias[| i++] = "left";
input_alias[| i++] = "right";
input_alias[| i++] = "fire1";
input_alias[| i++] = "fire2";
input_alias[| i++] = "bomb";

//==========================================================================//
//-----------------------KEYBOARD STUFF-------------------------------------//
//==========================================================================//

keymap = ds_map_create();

keymap[? "up"]    = ord('W');
keymap[? "down"]  = ord('S');
keymap[? "left"]  = ord('A');
keymap[? "right"] = ord('D');
keymap[? "fire1"] = vk_up;
keymap[? "fire2"] = vk_down;
keymap[? "bomb"]  = vk_left;

keymapalt = ds_map_create();

keymapalt[? "up"]    = vk_numpad8;
keymapalt[? "down"]  = vk_numpad2;
keymapalt[? "left"]  = vk_numpad4;
keymapalt[? "right"] = vk_numpad6;
keymapalt[? "bomb"]  = vk_right;

//==========================================================================//
//---------------------CONTROLLER STUFF-------------------------------------//
//==========================================================================//

gp_count = 0;
gp_active = ds_list_create();

for (var i = 0; i &lt; 4; i++;)
{
    gpad[i] = noone;
}

gpmap = ds_map_create();

gpmap[? "up"]    = gp_padu;
gpmap[? "down"]  = gp_padd;
gpmap[? "left"]  = gp_padl;
gpmap[? "right"] = gp_padr;
gpmap[? "fire1"] = gp_shoulderl;
gpmap[? "fire2"] = gp_shoulderr;
gpmap[? "bomb"]  = gp_face1;

gpmapalt = ds_map_create();

gpmapalt[? "fire1"] = gp_shoulderlb;
gpmapalt[? "fire2"] = gp_shoulderrb;
gpmapalt[? "bomb"]  = gp_face2;

//==========================================================================//
//------------------------INPUT GROUP STUFF---------------------------------//
//==========================================================================//

// Variables for priority direction
/*
* Priority direction is done so that if both "left" and "right" are pressed,
* the input system will follow which ever key was pressed later.
*/


group = ds_map_create();
group_button   = ds_list_create();
group_pressed  = ds_list_create();
group_released = ds_list_create();

input_group_make( "dir_x", "left", "right", true, true, true);
input_group_make( "dir_y", "up", "down", true, true, true);

//==========================================================================//
//---------------------------FILE STUFF-------------------------------------//
//==========================================================================//

config_default = "DefaultInputConfig.json";
config         = "InputConfig.json"

input_config_save( config_default);

if( !DEBUG)
{
    if( !file_exists( config))
    {
        file_copy( config_default, config);
    }
    else
    {
        input_config_load( config);
    }
}
else
{
    if( file_exists( config))
    {
        file_delete( config);
    }
}

//==========================================================================//
//--------------------------Extra STUFF-------------------------------------//
//==========================================================================//

enum state{ normal, new_input};
current_state = state.normal;

// Variables for lefty flip
dir_l = ds_list_create();
i = 0;

dir_l[| i++] = ord('W');
dir_l[| i++] = ord('S');
dir_l[| i++] = ord('A');
dir_l[| i++] = ord('D');

dir_r = ds_list_create()
i = 0;

dir_r[| i++] = vk_up;
dir_r[| i++] = vk_down;
dir_r[| i++] = vk_left;
dir_r[| i++] = vk_right;

// Variables for last gamepad input
for( var i = 0; i &lt; 4; i++)
{
    gp_last[i] = 0;
}

gp_btns = ds_map_create();
i = 0;
gp_btns[| i++] = gp_face1;
gp_btns[| i++] = gp_face2;
gp_btns[| i++] = gp_face3;
gp_btns[| i++] = gp_face4;
gp_btns[| i++] = gp_shoulderl;
gp_btns[| i++] = gp_shoulderr;
gp_btns[| i++] = gp_shoulderlb;
gp_btns[| i++] = gp_shoulderrb;
gp_btns[| i++] = gp_padu;
gp_btns[| i++] = gp_padd;
gp_btns[| i++] = gp_padl;
gp_btns[| i++] = gp_padr;
gp_btns[| i++] = gp_select;
gp_btns[| i++] = gp_start;
gp_btns[| i++] = gp_stickl;
gp_btns[| i++] = gp_stickr;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _len = ds_list_size( group_button);
for( var i = 0; i &lt; _len; i++)
{
    var _list = group[? group_button[| i]]

    if( input_get_key( _list[| 1]) &amp;&amp; input_get_key( _list[| 2]))
    {
        _list[| 0] = 2;
    }
    else
    if( input_get_key( _list[| 1]))
    {
        _list[| 0] = -1;
    }
    else
    if( input_get_key( _list[| 2]))
    {
        _list[| 0] = 1;
    }
    else
    {
        _list[| 0] = 0;
    }
}

_len = ds_list_size(group_pressed);
for( var i = 0; i &lt; _len; i++)
{
    var _list = group[? group_pressed[| i]]
    for( var j = 1; j &lt; ds_list_size( _list); j++)
    {
        if( input_get_key_pressed( _list[| j])) 
        _list[| 0] = input_group_wrap( j);
    }   
}

_len = ds_list_size(group_released);
for( var i = 0; i &lt; _len; i++)
{
    var _list = group[? group_released[| i]]
    for( var j = 1; j &lt; ds_list_size( _list); j++)
    {
        if( input_get_key_released( _list[| j])) 
        _list[| 0] = input_group_wrap( j);
    }   
}

_len = ds_list_size( gp_btns);
for( var i = 0; i &lt; gp_count; i++)
{
    for( var j = 0; j &lt; _len; j++)
    {
        var _gp = gp_active[| i];
        if( gamepad_button_check_pressed( _gp, gp_btns[| j]))
        {
            gp_last[ gp_active[| i]] = gp_btns[| j];
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    gamepad_set_axis_deadzone(pad, 0.25);       // Set the "deadzone" for the axis
    gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers
    gp_count++;
    ds_list_add( gp_active, pad);
    gpad[pad] = pad;
    break;
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    gp_count--;
    ds_list_delete( gp_active, ds_list_find_index( gp_active, pad));
    gpad[pad] = noone;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
